// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package errno

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsParamInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PARAM_INVALID.String() && e.Code == 400
}

func ErrorParamInvalid(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_PARAM_INVALID.String(), fmt.Sprintf(format, args...))
}

func IsDoConvertFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DO_CONVERT_FAILED.String() && e.Code == 500
}

func ErrorDoConvertFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_DO_CONVERT_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsVoConvertFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_VO_CONVERT_FAILED.String() && e.Code == 500
}

func ErrorVoConvertFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_VO_CONVERT_FAILED.String(), fmt.Sprintf(format, args...))
}

// data action common errors
func IsDataSaveFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DATA_SAVE_FAILED.String() && e.Code == 500
}

// data action common errors
func ErrorDataSaveFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_DATA_SAVE_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsDataQueryFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DATA_QUERY_FAILED.String() && e.Code == 500
}

func ErrorDataQueryFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_DATA_QUERY_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsDataNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DATA_NOT_FOUND.String() && e.Code == 404
}

func ErrorDataNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_DATA_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsDataUpdateFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DATA_UPDATE_FAILED.String() && e.Code == 500
}

func ErrorDataUpdateFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_DATA_UPDATE_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsDataRemoveFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DATA_REMOVE_FAILED.String() && e.Code == 500
}

func ErrorDataRemoveFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_DATA_REMOVE_FAILED.String(), fmt.Sprintf(format, args...))
}

// UserAPI
func IsUserRegisterFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_REGISTER_FAILED.String() && e.Code == 500
}

// UserAPI
func ErrorUserRegisterFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_USER_REGISTER_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsUserNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_NOT_FOUND.String() && e.Code == 404
}

func ErrorUserNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_USER_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsUserTokenSignFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_TOKEN_SIGN_FAILED.String() && e.Code == 500
}

func ErrorUserTokenSignFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_USER_TOKEN_SIGN_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsUserUnameBeUsed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_UNAME_BE_USED.String() && e.Code == 400
}

func ErrorUserUnameBeUsed(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_USER_UNAME_BE_USED.String(), fmt.Sprintf(format, args...))
}

// MessageAPI
func IsMessageSendFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_MESSAGE_SEND_FAILED.String() && e.Code == 500
}

// MessageAPI
func ErrorMessageSendFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_MESSAGE_SEND_FAILED.String(), fmt.Sprintf(format, args...))
}
