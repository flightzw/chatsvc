// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.26.1
// source: chatsvc/v1/friend.api.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationFriendServiceAddFriend = "/chatsvc.v1.FriendService/AddFriend"
const OperationFriendServiceGetFriend = "/chatsvc.v1.FriendService/GetFriend"
const OperationFriendServiceListFriend = "/chatsvc.v1.FriendService/ListFriend"
const OperationFriendServiceRemoveFriend = "/chatsvc.v1.FriendService/RemoveFriend"
const OperationFriendServiceUpdateFriend = "/chatsvc.v1.FriendService/UpdateFriend"

type FriendServiceHTTPServer interface {
	// AddFriend 添加好友
	AddFriend(context.Context, *AddFriendRequest) (*AddFriendReply, error)
	// GetFriend 好友详情
	GetFriend(context.Context, *GetFriendRequest) (*GetFriendReply, error)
	// ListFriend 好友列表
	ListFriend(context.Context, *ListFriendRequest) (*ListFriendReply, error)
	// RemoveFriend 移除好友
	RemoveFriend(context.Context, *RemoveFriendRequest) (*RemoveFriendReply, error)
	// UpdateFriend 更新好友备注
	UpdateFriend(context.Context, *UpdateFriendRequest) (*UpdateFriendReply, error)
}

func RegisterFriendServiceHTTPServer(s *http.Server, srv FriendServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/chatsvc/v1/friends", _FriendService_AddFriend0_HTTP_Handler(srv))
	r.GET("/chatsvc/v1/friends/{friend_id}", _FriendService_GetFriend0_HTTP_Handler(srv))
	r.GET("/chatsvc/v1/friends", _FriendService_ListFriend0_HTTP_Handler(srv))
	r.PUT("/chatsvc/v1/friends/{friend_id}", _FriendService_UpdateFriend0_HTTP_Handler(srv))
	r.DELETE("/chatsvc/v1/friends/{friend_id}", _FriendService_RemoveFriend0_HTTP_Handler(srv))
}

func _FriendService_AddFriend0_HTTP_Handler(srv FriendServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddFriendRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFriendServiceAddFriend)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddFriend(ctx, req.(*AddFriendRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddFriendReply)
		return ctx.Result(200, reply)
	}
}

func _FriendService_GetFriend0_HTTP_Handler(srv FriendServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetFriendRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFriendServiceGetFriend)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetFriend(ctx, req.(*GetFriendRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetFriendReply)
		return ctx.Result(200, reply)
	}
}

func _FriendService_ListFriend0_HTTP_Handler(srv FriendServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListFriendRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFriendServiceListFriend)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListFriend(ctx, req.(*ListFriendRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListFriendReply)
		return ctx.Result(200, reply)
	}
}

func _FriendService_UpdateFriend0_HTTP_Handler(srv FriendServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateFriendRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFriendServiceUpdateFriend)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateFriend(ctx, req.(*UpdateFriendRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateFriendReply)
		return ctx.Result(200, reply)
	}
}

func _FriendService_RemoveFriend0_HTTP_Handler(srv FriendServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RemoveFriendRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFriendServiceRemoveFriend)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RemoveFriend(ctx, req.(*RemoveFriendRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RemoveFriendReply)
		return ctx.Result(200, reply)
	}
}

type FriendServiceHTTPClient interface {
	AddFriend(ctx context.Context, req *AddFriendRequest, opts ...http.CallOption) (rsp *AddFriendReply, err error)
	GetFriend(ctx context.Context, req *GetFriendRequest, opts ...http.CallOption) (rsp *GetFriendReply, err error)
	ListFriend(ctx context.Context, req *ListFriendRequest, opts ...http.CallOption) (rsp *ListFriendReply, err error)
	RemoveFriend(ctx context.Context, req *RemoveFriendRequest, opts ...http.CallOption) (rsp *RemoveFriendReply, err error)
	UpdateFriend(ctx context.Context, req *UpdateFriendRequest, opts ...http.CallOption) (rsp *UpdateFriendReply, err error)
}

type FriendServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewFriendServiceHTTPClient(client *http.Client) FriendServiceHTTPClient {
	return &FriendServiceHTTPClientImpl{client}
}

func (c *FriendServiceHTTPClientImpl) AddFriend(ctx context.Context, in *AddFriendRequest, opts ...http.CallOption) (*AddFriendReply, error) {
	var out AddFriendReply
	pattern := "/chatsvc/v1/friends"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFriendServiceAddFriend))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *FriendServiceHTTPClientImpl) GetFriend(ctx context.Context, in *GetFriendRequest, opts ...http.CallOption) (*GetFriendReply, error) {
	var out GetFriendReply
	pattern := "/chatsvc/v1/friends/{friend_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFriendServiceGetFriend))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *FriendServiceHTTPClientImpl) ListFriend(ctx context.Context, in *ListFriendRequest, opts ...http.CallOption) (*ListFriendReply, error) {
	var out ListFriendReply
	pattern := "/chatsvc/v1/friends"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFriendServiceListFriend))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *FriendServiceHTTPClientImpl) RemoveFriend(ctx context.Context, in *RemoveFriendRequest, opts ...http.CallOption) (*RemoveFriendReply, error) {
	var out RemoveFriendReply
	pattern := "/chatsvc/v1/friends/{friend_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFriendServiceRemoveFriend))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *FriendServiceHTTPClientImpl) UpdateFriend(ctx context.Context, in *UpdateFriendRequest, opts ...http.CallOption) (*UpdateFriendReply, error) {
	var out UpdateFriendReply
	pattern := "/chatsvc/v1/friends/{friend_id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFriendServiceUpdateFriend))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
