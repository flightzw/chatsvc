// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.26.1
// source: chatsvc/v1/private_message.api.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	PrivateMessageService_SendPrivateMessage_FullMethodName        = "/chatsvc.v1.PrivateMessageService/SendPrivateMessage"
	PrivateMessageService_RecallPrivateMessage_FullMethodName      = "/chatsvc.v1.PrivateMessageService/RecallPrivateMessage"
	PrivateMessageService_PullOfflinePrivateMessage_FullMethodName = "/chatsvc.v1.PrivateMessageService/PullOfflinePrivateMessage"
	PrivateMessageService_ReadedPrivateMessage_FullMethodName      = "/chatsvc.v1.PrivateMessageService/ReadedPrivateMessage"
	PrivateMessageService_ListPrivateMessage_FullMethodName        = "/chatsvc.v1.PrivateMessageService/ListPrivateMessage"
)

// PrivateMessageServiceClient is the client API for PrivateMessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 私聊消息
type PrivateMessageServiceClient interface {
	// 发送私聊消息
	SendPrivateMessage(ctx context.Context, in *SendPrivateMessageRequest, opts ...grpc.CallOption) (*SendPrivateMessageReply, error)
	// 撤回私聊消息
	RecallPrivateMessage(ctx context.Context, in *RecallPrivateMessageRequest, opts ...grpc.CallOption) (*RecallPrivateMessageReply, error)
	// 拉取离线消息
	PullOfflinePrivateMessage(ctx context.Context, in *PullOfflineMessageRequest, opts ...grpc.CallOption) (*PullOfflineMessageReply, error)
	// 设置消息已读
	ReadedPrivateMessage(ctx context.Context, in *ReadedPrivateMessageRequest, opts ...grpc.CallOption) (*ReadedPrivateMessageReply, error)
	// 查找历史消息
	ListPrivateMessage(ctx context.Context, in *ListPrivateMessageRequest, opts ...grpc.CallOption) (*ListPrivateMessageReply, error)
}

type privateMessageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPrivateMessageServiceClient(cc grpc.ClientConnInterface) PrivateMessageServiceClient {
	return &privateMessageServiceClient{cc}
}

func (c *privateMessageServiceClient) SendPrivateMessage(ctx context.Context, in *SendPrivateMessageRequest, opts ...grpc.CallOption) (*SendPrivateMessageReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendPrivateMessageReply)
	err := c.cc.Invoke(ctx, PrivateMessageService_SendPrivateMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateMessageServiceClient) RecallPrivateMessage(ctx context.Context, in *RecallPrivateMessageRequest, opts ...grpc.CallOption) (*RecallPrivateMessageReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecallPrivateMessageReply)
	err := c.cc.Invoke(ctx, PrivateMessageService_RecallPrivateMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateMessageServiceClient) PullOfflinePrivateMessage(ctx context.Context, in *PullOfflineMessageRequest, opts ...grpc.CallOption) (*PullOfflineMessageReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PullOfflineMessageReply)
	err := c.cc.Invoke(ctx, PrivateMessageService_PullOfflinePrivateMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateMessageServiceClient) ReadedPrivateMessage(ctx context.Context, in *ReadedPrivateMessageRequest, opts ...grpc.CallOption) (*ReadedPrivateMessageReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadedPrivateMessageReply)
	err := c.cc.Invoke(ctx, PrivateMessageService_ReadedPrivateMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateMessageServiceClient) ListPrivateMessage(ctx context.Context, in *ListPrivateMessageRequest, opts ...grpc.CallOption) (*ListPrivateMessageReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPrivateMessageReply)
	err := c.cc.Invoke(ctx, PrivateMessageService_ListPrivateMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrivateMessageServiceServer is the server API for PrivateMessageService service.
// All implementations must embed UnimplementedPrivateMessageServiceServer
// for forward compatibility
//
// 私聊消息
type PrivateMessageServiceServer interface {
	// 发送私聊消息
	SendPrivateMessage(context.Context, *SendPrivateMessageRequest) (*SendPrivateMessageReply, error)
	// 撤回私聊消息
	RecallPrivateMessage(context.Context, *RecallPrivateMessageRequest) (*RecallPrivateMessageReply, error)
	// 拉取离线消息
	PullOfflinePrivateMessage(context.Context, *PullOfflineMessageRequest) (*PullOfflineMessageReply, error)
	// 设置消息已读
	ReadedPrivateMessage(context.Context, *ReadedPrivateMessageRequest) (*ReadedPrivateMessageReply, error)
	// 查找历史消息
	ListPrivateMessage(context.Context, *ListPrivateMessageRequest) (*ListPrivateMessageReply, error)
	mustEmbedUnimplementedPrivateMessageServiceServer()
}

// UnimplementedPrivateMessageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPrivateMessageServiceServer struct {
}

func (UnimplementedPrivateMessageServiceServer) SendPrivateMessage(context.Context, *SendPrivateMessageRequest) (*SendPrivateMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPrivateMessage not implemented")
}
func (UnimplementedPrivateMessageServiceServer) RecallPrivateMessage(context.Context, *RecallPrivateMessageRequest) (*RecallPrivateMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecallPrivateMessage not implemented")
}
func (UnimplementedPrivateMessageServiceServer) PullOfflinePrivateMessage(context.Context, *PullOfflineMessageRequest) (*PullOfflineMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullOfflinePrivateMessage not implemented")
}
func (UnimplementedPrivateMessageServiceServer) ReadedPrivateMessage(context.Context, *ReadedPrivateMessageRequest) (*ReadedPrivateMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadedPrivateMessage not implemented")
}
func (UnimplementedPrivateMessageServiceServer) ListPrivateMessage(context.Context, *ListPrivateMessageRequest) (*ListPrivateMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPrivateMessage not implemented")
}
func (UnimplementedPrivateMessageServiceServer) mustEmbedUnimplementedPrivateMessageServiceServer() {}

// UnsafePrivateMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrivateMessageServiceServer will
// result in compilation errors.
type UnsafePrivateMessageServiceServer interface {
	mustEmbedUnimplementedPrivateMessageServiceServer()
}

func RegisterPrivateMessageServiceServer(s grpc.ServiceRegistrar, srv PrivateMessageServiceServer) {
	s.RegisterService(&PrivateMessageService_ServiceDesc, srv)
}

func _PrivateMessageService_SendPrivateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPrivateMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateMessageServiceServer).SendPrivateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrivateMessageService_SendPrivateMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateMessageServiceServer).SendPrivateMessage(ctx, req.(*SendPrivateMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateMessageService_RecallPrivateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecallPrivateMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateMessageServiceServer).RecallPrivateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrivateMessageService_RecallPrivateMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateMessageServiceServer).RecallPrivateMessage(ctx, req.(*RecallPrivateMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateMessageService_PullOfflinePrivateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullOfflineMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateMessageServiceServer).PullOfflinePrivateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrivateMessageService_PullOfflinePrivateMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateMessageServiceServer).PullOfflinePrivateMessage(ctx, req.(*PullOfflineMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateMessageService_ReadedPrivateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadedPrivateMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateMessageServiceServer).ReadedPrivateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrivateMessageService_ReadedPrivateMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateMessageServiceServer).ReadedPrivateMessage(ctx, req.(*ReadedPrivateMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateMessageService_ListPrivateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPrivateMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateMessageServiceServer).ListPrivateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrivateMessageService_ListPrivateMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateMessageServiceServer).ListPrivateMessage(ctx, req.(*ListPrivateMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PrivateMessageService_ServiceDesc is the grpc.ServiceDesc for PrivateMessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PrivateMessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chatsvc.v1.PrivateMessageService",
	HandlerType: (*PrivateMessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendPrivateMessage",
			Handler:    _PrivateMessageService_SendPrivateMessage_Handler,
		},
		{
			MethodName: "RecallPrivateMessage",
			Handler:    _PrivateMessageService_RecallPrivateMessage_Handler,
		},
		{
			MethodName: "PullOfflinePrivateMessage",
			Handler:    _PrivateMessageService_PullOfflinePrivateMessage_Handler,
		},
		{
			MethodName: "ReadedPrivateMessage",
			Handler:    _PrivateMessageService_ReadedPrivateMessage_Handler,
		},
		{
			MethodName: "ListPrivateMessage",
			Handler:    _PrivateMessageService_ListPrivateMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chatsvc/v1/private_message.api.proto",
}
