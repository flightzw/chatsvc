// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.26.1
// source: chatsvc/v1/private_message.api.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationPrivateMessageServiceListPrivateMessage = "/chatsvc.v1.PrivateMessageService/ListPrivateMessage"
const OperationPrivateMessageServicePullOfflinePrivateMessage = "/chatsvc.v1.PrivateMessageService/PullOfflinePrivateMessage"
const OperationPrivateMessageServiceReadedPrivateMessage = "/chatsvc.v1.PrivateMessageService/ReadedPrivateMessage"
const OperationPrivateMessageServiceRecallPrivateMessage = "/chatsvc.v1.PrivateMessageService/RecallPrivateMessage"
const OperationPrivateMessageServiceSendPrivateMessage = "/chatsvc.v1.PrivateMessageService/SendPrivateMessage"

type PrivateMessageServiceHTTPServer interface {
	// ListPrivateMessage 查找历史消息
	ListPrivateMessage(context.Context, *ListPrivateMessageRequest) (*ListPrivateMessageReply, error)
	// PullOfflinePrivateMessage 拉取离线消息
	PullOfflinePrivateMessage(context.Context, *PullOfflineMessageRequest) (*PullOfflineMessageReply, error)
	// ReadedPrivateMessage 设置消息已读
	ReadedPrivateMessage(context.Context, *ReadedPrivateMessageRequest) (*ReadedPrivateMessageReply, error)
	// RecallPrivateMessage 撤回私聊消息
	RecallPrivateMessage(context.Context, *RecallPrivateMessageRequest) (*RecallPrivateMessageReply, error)
	// SendPrivateMessage 发送私聊消息
	SendPrivateMessage(context.Context, *SendPrivateMessageRequest) (*SendPrivateMessageReply, error)
}

func RegisterPrivateMessageServiceHTTPServer(s *http.Server, srv PrivateMessageServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/chatsvc/v1/private-messages/send", _PrivateMessageService_SendPrivateMessage0_HTTP_Handler(srv))
	r.PUT("/chatsvc/v1/private-messages/recall/{id}", _PrivateMessageService_RecallPrivateMessage0_HTTP_Handler(srv))
	r.GET("/chatsvc/v1/private-messages/offline", _PrivateMessageService_PullOfflinePrivateMessage0_HTTP_Handler(srv))
	r.PUT("/chatsvc/v1/private-messages/readed", _PrivateMessageService_ReadedPrivateMessage0_HTTP_Handler(srv))
	r.GET("/chatsvc/v1/private-messages", _PrivateMessageService_ListPrivateMessage0_HTTP_Handler(srv))
}

func _PrivateMessageService_SendPrivateMessage0_HTTP_Handler(srv PrivateMessageServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendPrivateMessageRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPrivateMessageServiceSendPrivateMessage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendPrivateMessage(ctx, req.(*SendPrivateMessageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SendPrivateMessageReply)
		return ctx.Result(200, reply)
	}
}

func _PrivateMessageService_RecallPrivateMessage0_HTTP_Handler(srv PrivateMessageServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RecallPrivateMessageRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPrivateMessageServiceRecallPrivateMessage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RecallPrivateMessage(ctx, req.(*RecallPrivateMessageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RecallPrivateMessageReply)
		return ctx.Result(200, reply)
	}
}

func _PrivateMessageService_PullOfflinePrivateMessage0_HTTP_Handler(srv PrivateMessageServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PullOfflineMessageRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPrivateMessageServicePullOfflinePrivateMessage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PullOfflinePrivateMessage(ctx, req.(*PullOfflineMessageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PullOfflineMessageReply)
		return ctx.Result(200, reply)
	}
}

func _PrivateMessageService_ReadedPrivateMessage0_HTTP_Handler(srv PrivateMessageServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReadedPrivateMessageRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPrivateMessageServiceReadedPrivateMessage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ReadedPrivateMessage(ctx, req.(*ReadedPrivateMessageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ReadedPrivateMessageReply)
		return ctx.Result(200, reply)
	}
}

func _PrivateMessageService_ListPrivateMessage0_HTTP_Handler(srv PrivateMessageServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListPrivateMessageRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPrivateMessageServiceListPrivateMessage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListPrivateMessage(ctx, req.(*ListPrivateMessageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListPrivateMessageReply)
		return ctx.Result(200, reply)
	}
}

type PrivateMessageServiceHTTPClient interface {
	ListPrivateMessage(ctx context.Context, req *ListPrivateMessageRequest, opts ...http.CallOption) (rsp *ListPrivateMessageReply, err error)
	PullOfflinePrivateMessage(ctx context.Context, req *PullOfflineMessageRequest, opts ...http.CallOption) (rsp *PullOfflineMessageReply, err error)
	ReadedPrivateMessage(ctx context.Context, req *ReadedPrivateMessageRequest, opts ...http.CallOption) (rsp *ReadedPrivateMessageReply, err error)
	RecallPrivateMessage(ctx context.Context, req *RecallPrivateMessageRequest, opts ...http.CallOption) (rsp *RecallPrivateMessageReply, err error)
	SendPrivateMessage(ctx context.Context, req *SendPrivateMessageRequest, opts ...http.CallOption) (rsp *SendPrivateMessageReply, err error)
}

type PrivateMessageServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewPrivateMessageServiceHTTPClient(client *http.Client) PrivateMessageServiceHTTPClient {
	return &PrivateMessageServiceHTTPClientImpl{client}
}

func (c *PrivateMessageServiceHTTPClientImpl) ListPrivateMessage(ctx context.Context, in *ListPrivateMessageRequest, opts ...http.CallOption) (*ListPrivateMessageReply, error) {
	var out ListPrivateMessageReply
	pattern := "/chatsvc/v1/private-messages"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPrivateMessageServiceListPrivateMessage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PrivateMessageServiceHTTPClientImpl) PullOfflinePrivateMessage(ctx context.Context, in *PullOfflineMessageRequest, opts ...http.CallOption) (*PullOfflineMessageReply, error) {
	var out PullOfflineMessageReply
	pattern := "/chatsvc/v1/private-messages/offline"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPrivateMessageServicePullOfflinePrivateMessage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PrivateMessageServiceHTTPClientImpl) ReadedPrivateMessage(ctx context.Context, in *ReadedPrivateMessageRequest, opts ...http.CallOption) (*ReadedPrivateMessageReply, error) {
	var out ReadedPrivateMessageReply
	pattern := "/chatsvc/v1/private-messages/readed"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPrivateMessageServiceReadedPrivateMessage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PrivateMessageServiceHTTPClientImpl) RecallPrivateMessage(ctx context.Context, in *RecallPrivateMessageRequest, opts ...http.CallOption) (*RecallPrivateMessageReply, error) {
	var out RecallPrivateMessageReply
	pattern := "/chatsvc/v1/private-messages/recall/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPrivateMessageServiceRecallPrivateMessage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PrivateMessageServiceHTTPClientImpl) SendPrivateMessage(ctx context.Context, in *SendPrivateMessageRequest, opts ...http.CallOption) (*SendPrivateMessageReply, error) {
	var out SendPrivateMessageReply
	pattern := "/chatsvc/v1/private-messages/send"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPrivateMessageServiceSendPrivateMessage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
