// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.26.1
// source: chatsvc/v1/user.api.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationUserServiceGetUserByID = "/chatsvc.v1.UserService/GetUserByID"
const OperationUserServiceGetUserSelf = "/chatsvc.v1.UserService/GetUserSelf"
const OperationUserServiceListUserInfo = "/chatsvc.v1.UserService/ListUserInfo"
const OperationUserServiceUpdatePassword = "/chatsvc.v1.UserService/UpdatePassword"
const OperationUserServiceUpdateUserInfo = "/chatsvc.v1.UserService/UpdateUserInfo"

type UserServiceHTTPServer interface {
	// GetUserByID 获取用户信息
	GetUserByID(context.Context, *GetUserByIDRequest) (*GetUserByIDReply, error)
	// GetUserSelf 获取当前用户信息
	GetUserSelf(context.Context, *GetUserSelfRequest) (*GetUserSelfReply, error)
	// ListUserInfo 用户列表
	ListUserInfo(context.Context, *ListUserInfoRequest) (*ListUserInfoReply, error)
	// UpdatePassword 更改密码
	UpdatePassword(context.Context, *UpdatePasswordRequest) (*UpdatePasswordReply, error)
	// UpdateUserInfo 变更用户信息
	UpdateUserInfo(context.Context, *UpdateUserInfoRequest) (*UpdateUserInfoReply, error)
}

func RegisterUserServiceHTTPServer(s *http.Server, srv UserServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/chatsvc/v1/users/self", _UserService_GetUserSelf0_HTTP_Handler(srv))
	r.PUT("/chatsvc/v1/users", _UserService_UpdateUserInfo0_HTTP_Handler(srv))
	r.GET("/chatsvc/v1/users/{id}", _UserService_GetUserByID0_HTTP_Handler(srv))
	r.GET("/chatsvc/v1/users", _UserService_ListUserInfo0_HTTP_Handler(srv))
	r.PUT("/chatsvc/v1/users/password", _UserService_UpdatePassword0_HTTP_Handler(srv))
}

func _UserService_GetUserSelf0_HTTP_Handler(srv UserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserSelfRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserServiceGetUserSelf)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserSelf(ctx, req.(*GetUserSelfRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserSelfReply)
		return ctx.Result(200, reply)
	}
}

func _UserService_UpdateUserInfo0_HTTP_Handler(srv UserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateUserInfoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserServiceUpdateUserInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateUserInfo(ctx, req.(*UpdateUserInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateUserInfoReply)
		return ctx.Result(200, reply)
	}
}

func _UserService_GetUserByID0_HTTP_Handler(srv UserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserByIDRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserServiceGetUserByID)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserByID(ctx, req.(*GetUserByIDRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserByIDReply)
		return ctx.Result(200, reply)
	}
}

func _UserService_ListUserInfo0_HTTP_Handler(srv UserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListUserInfoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserServiceListUserInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUserInfo(ctx, req.(*ListUserInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUserInfoReply)
		return ctx.Result(200, reply)
	}
}

func _UserService_UpdatePassword0_HTTP_Handler(srv UserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdatePasswordRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserServiceUpdatePassword)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdatePassword(ctx, req.(*UpdatePasswordRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdatePasswordReply)
		return ctx.Result(200, reply)
	}
}

type UserServiceHTTPClient interface {
	GetUserByID(ctx context.Context, req *GetUserByIDRequest, opts ...http.CallOption) (rsp *GetUserByIDReply, err error)
	GetUserSelf(ctx context.Context, req *GetUserSelfRequest, opts ...http.CallOption) (rsp *GetUserSelfReply, err error)
	ListUserInfo(ctx context.Context, req *ListUserInfoRequest, opts ...http.CallOption) (rsp *ListUserInfoReply, err error)
	UpdatePassword(ctx context.Context, req *UpdatePasswordRequest, opts ...http.CallOption) (rsp *UpdatePasswordReply, err error)
	UpdateUserInfo(ctx context.Context, req *UpdateUserInfoRequest, opts ...http.CallOption) (rsp *UpdateUserInfoReply, err error)
}

type UserServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewUserServiceHTTPClient(client *http.Client) UserServiceHTTPClient {
	return &UserServiceHTTPClientImpl{client}
}

func (c *UserServiceHTTPClientImpl) GetUserByID(ctx context.Context, in *GetUserByIDRequest, opts ...http.CallOption) (*GetUserByIDReply, error) {
	var out GetUserByIDReply
	pattern := "/chatsvc/v1/users/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserServiceGetUserByID))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserServiceHTTPClientImpl) GetUserSelf(ctx context.Context, in *GetUserSelfRequest, opts ...http.CallOption) (*GetUserSelfReply, error) {
	var out GetUserSelfReply
	pattern := "/chatsvc/v1/users/self"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserServiceGetUserSelf))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserServiceHTTPClientImpl) ListUserInfo(ctx context.Context, in *ListUserInfoRequest, opts ...http.CallOption) (*ListUserInfoReply, error) {
	var out ListUserInfoReply
	pattern := "/chatsvc/v1/users"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserServiceListUserInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserServiceHTTPClientImpl) UpdatePassword(ctx context.Context, in *UpdatePasswordRequest, opts ...http.CallOption) (*UpdatePasswordReply, error) {
	var out UpdatePasswordReply
	pattern := "/chatsvc/v1/users/password"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserServiceUpdatePassword))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserServiceHTTPClientImpl) UpdateUserInfo(ctx context.Context, in *UpdateUserInfoRequest, opts ...http.CallOption) (*UpdateUserInfoReply, error) {
	var out UpdateUserInfoReply
	pattern := "/chatsvc/v1/users"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserServiceUpdateUserInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
