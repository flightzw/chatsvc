// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/flightzw/chatsvc/internal/biz"
	"github.com/flightzw/chatsvc/internal/conf"
	"github.com/flightzw/chatsvc/internal/data"
	server2 "github.com/flightzw/chatsvc/internal/server"
	"github.com/flightzw/chatsvc/internal/service"
	"github.com/flightzw/chatsvc/internal/ws/client"
	"github.com/flightzw/chatsvc/internal/ws/server"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	redisClient := data.NewRedisClient(confData)
	sessionHub, err := server.InitSessionHub(logger, redisClient)
	if err != nil {
		return nil, nil, err
	}
	db := data.NewDB(confData, logger)
	dataData, cleanup, err := data.NewData(confData, db, redisClient, logger)
	if err != nil {
		return nil, nil, err
	}
	friendRepo := data.NewFriendRepo(dataData, logger)
	userRepo := data.NewUserRepo(dataData, logger)
	chatClient := client.InitChatClient(logger, redisClient)
	friendUsecase := biz.NewFriendUsecase(friendRepo, userRepo, logger, chatClient)
	friendService := service.NewFriendService(friendUsecase)
	userUsecase := biz.NewUserUsecase(userRepo, friendRepo, confServer, chatClient, logger)
	userService := service.NewUserService(userUsecase)
	loginService := service.NewLoginService(userUsecase)
	privateMessageRepo := data.NewPrivateMessageRepo(dataData, logger)
	configRepo := data.NewConfigRepo(dataData, logger)
	sensitiveWordRepo := data.NewSensitiveWordRepo(dataData, logger)
	filter, err := biz.InitSensitiveWordFiliter(logger, sensitiveWordRepo)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	privateMessageUsecase := biz.NewPrivateMessageUsecase(privateMessageRepo, friendRepo, userRepo, configRepo, confServer, logger, chatClient, redisClient, filter)
	privateMessageService := service.NewPrivateMessageService(privateMessageUsecase)
	httpServer := server2.NewHTTPServer(confServer, logger, sessionHub, friendService, userService, loginService, privateMessageService, redisClient)
	app := newApp(logger, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
